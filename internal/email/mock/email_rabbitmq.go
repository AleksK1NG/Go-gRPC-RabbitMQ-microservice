// Code generated by MockGen. DO NOT EDIT.
// Source: email_rabbitmq.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmailsPublisher is a mock of EmailsPublisher interface
type MockEmailsPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsPublisherMockRecorder
}

// MockEmailsPublisherMockRecorder is the mock recorder for MockEmailsPublisher
type MockEmailsPublisherMockRecorder struct {
	mock *MockEmailsPublisher
}

// NewMockEmailsPublisher creates a new mock instance
func NewMockEmailsPublisher(ctrl *gomock.Controller) *MockEmailsPublisher {
	mock := &MockEmailsPublisher{ctrl: ctrl}
	mock.recorder = &MockEmailsPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailsPublisher) EXPECT() *MockEmailsPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockEmailsPublisher) Publish(body []byte, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", body, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockEmailsPublisherMockRecorder) Publish(body, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEmailsPublisher)(nil).Publish), body, contentType)
}

// MockEmailsConsumer is a mock of EmailsConsumer interface
type MockEmailsConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsConsumerMockRecorder
}

// MockEmailsConsumerMockRecorder is the mock recorder for MockEmailsConsumer
type MockEmailsConsumerMockRecorder struct {
	mock *MockEmailsConsumer
}

// NewMockEmailsConsumer creates a new mock instance
func NewMockEmailsConsumer(ctrl *gomock.Controller) *MockEmailsConsumer {
	mock := &MockEmailsConsumer{ctrl: ctrl}
	mock.recorder = &MockEmailsConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailsConsumer) EXPECT() *MockEmailsConsumerMockRecorder {
	return m.recorder
}

// StartConsumer mocks base method
func (m *MockEmailsConsumer) StartConsumer(workerPoolSize int, exchange, queueName, bindingKey, consumerTag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsumer", workerPoolSize, exchange, queueName, bindingKey, consumerTag)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsumer indicates an expected call of StartConsumer
func (mr *MockEmailsConsumerMockRecorder) StartConsumer(workerPoolSize, exchange, queueName, bindingKey, consumerTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumer", reflect.TypeOf((*MockEmailsConsumer)(nil).StartConsumer), workerPoolSize, exchange, queueName, bindingKey, consumerTag)
}
