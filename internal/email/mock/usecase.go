// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/AleksK1NG/email-microservice/internal/models"
	utils "github.com/AleksK1NG/email-microservice/pkg/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockEmailsUseCase is a mock of EmailsUseCase interface
type MockEmailsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsUseCaseMockRecorder
}

// MockEmailsUseCaseMockRecorder is the mock recorder for MockEmailsUseCase
type MockEmailsUseCaseMockRecorder struct {
	mock *MockEmailsUseCase
}

// NewMockEmailsUseCase creates a new mock instance
func NewMockEmailsUseCase(ctrl *gomock.Controller) *MockEmailsUseCase {
	mock := &MockEmailsUseCase{ctrl: ctrl}
	mock.recorder = &MockEmailsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailsUseCase) EXPECT() *MockEmailsUseCaseMockRecorder {
	return m.recorder
}

// SendEmail mocks base method
func (m *MockEmailsUseCase) SendEmail(ctx context.Context, deliveryBody []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, deliveryBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail
func (mr *MockEmailsUseCaseMockRecorder) SendEmail(ctx, deliveryBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailsUseCase)(nil).SendEmail), ctx, deliveryBody)
}

// PublishEmailToQueue mocks base method
func (m *MockEmailsUseCase) PublishEmailToQueue(ctx context.Context, email *models.Email) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEmailToQueue", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEmailToQueue indicates an expected call of PublishEmailToQueue
func (mr *MockEmailsUseCaseMockRecorder) PublishEmailToQueue(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEmailToQueue", reflect.TypeOf((*MockEmailsUseCase)(nil).PublishEmailToQueue), ctx, email)
}

// FindEmailById mocks base method
func (m *MockEmailsUseCase) FindEmailById(ctx context.Context, emailID uuid.UUID) (*models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmailById", ctx, emailID)
	ret0, _ := ret[0].(*models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmailById indicates an expected call of FindEmailById
func (mr *MockEmailsUseCaseMockRecorder) FindEmailById(ctx, emailID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmailById", reflect.TypeOf((*MockEmailsUseCase)(nil).FindEmailById), ctx, emailID)
}

// FindEmailsByReceiver mocks base method
func (m *MockEmailsUseCase) FindEmailsByReceiver(ctx context.Context, to string, query *utils.PaginationQuery) (*models.EmailsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmailsByReceiver", ctx, to, query)
	ret0, _ := ret[0].(*models.EmailsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmailsByReceiver indicates an expected call of FindEmailsByReceiver
func (mr *MockEmailsUseCaseMockRecorder) FindEmailsByReceiver(ctx, to, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmailsByReceiver", reflect.TypeOf((*MockEmailsUseCase)(nil).FindEmailsByReceiver), ctx, to, query)
}
